---
description: "Outlines key planned refactoring efforts and architectural changes for the project, guiding AI assistance towards these goals. Goals are listed in priority order based on latest understanding."
alwaysApply: false 
---

# Project Refactoring & Improvement Goals (Prioritized)

This document outlines key areas targeted for improvement, listed in **priority order**. When assisting with development, prioritize solutions aligning with this order.

1.  **Stabilize Currently Used RL Code Path & Configuration**
    * **Goal:** Fix critical configuration issues in the active RL code path (`Hexgame/utils/`) and ensure `consumers.py` uses it correctly, acknowledging its limitations.
    * **Actions:**
        * **1a (Configurable Path):** Refactor `@./backend/RL_Hex_game/Hex/Hexgame/utils/Algorithm.py` (and `consumers.py` if needed) to load the model path from Django settings (`settings.py`) or an environment variable, removing the hardcoded path.
        * **1b (Verify Imports):** Confirm `@./backend/RL_Hex_game/Hex/Hexgame/consumers.py` consistently imports `HexAI` from `@./backend/RL_Hex_game/Hex/Hexgame/utils/Algorithm.py`.

2.  **Switch to Correct RL Implementation (from `algorithm/`)**
    * **Goal:** Replace the incorrect/incomplete RL logic usage originating from `Hexgame/utils/` with the correct implementations from the `algorithm/` directory. This includes using the proper MCTS and GameLogic.
    * **Actions:**
        * **2a (Refactor Imports):** Modify `@./backend/RL_Hex_game/Hex/Hexgame/consumers.py` and/or `@./backend/RL_Hex_game/Hex/Hexgame/utils/Algorithm.py` to import and use `HexGame` from `@./backend/RL_Hex_game/algorithm/GameLogic.py` and `MCTS` from `@./backend/RL_Hex_game/algorithm/MCTS.py`. Ensure the `HexNet` model used is also the canonical one (likely from `algorithm/Hexmodel.py`).
        * **2b (Integrate MCTS Correctly):** Ensure the AI move prediction logic correctly initializes the `MCTS` class with **`simulations=200`** and uses the `GameLogic` state representation to run the `mcts.search()`. The final move selection must be based on the MCTS results.
        * **2c (Cleanup `utils/`):** Once the switch is complete and verified, remove the now-redundant RL logic files (e.g., `Algorithm.py`, `Hexmodel.py`, incorrect MCTS/GameLogic if present) from the `utils/` directory.

3.  **Refine UI/UX & Frontend Logic (Initial Structural Phase)**
    * **Goal:** Enhance the UI/UX, improve frontend structure, and decouple development using tests and mocks.
    * **Actions:**
        * Analyze/refactor components (`@./hex-ai-frontend/src/components/`).
        * Implement static UI versions first.
        * Set up unit tests (Jest/RTL).
        * Define and use mock APIs/logic for initial component development.

4.  **Move Core Game Logic to Frontend**
    * **Goal:** Relocate primary game logic checks (validation, win/loss, undo state) from the backend (`models.py`, `consumers.py`) to the frontend (`gameStore.ts`).
    * **Implication:** Backend focuses more on persistence/orchestration. Requires careful implementation and testing.

5.  **Refine API Strategy & Implementation**
    * **Goal:** Solidify API usage (WebSocket priority for game actions, REST for auxiliary) and implement needed endpoints.
    * **Actions:**
        * Deprecate/remove redundant REST endpoints for game actions in `views.py`.
        * Implement `GET /api/games/` for game lists.
        * Add other necessary REST endpoints.

6.  **Refine UI/UX & Frontend Logic (Final Integration Phase)**
    * **Goal:** Connect the refined UI components to the real frontend logic and finalized backend APIs.
    * **Actions:** Replace mock APIs/logic with actual implementations from Goal #4 and Goal #5. Conduct end-to-end testing.

**Guidance:** Focus assistance on stabilizing configuration (Goal #1) first. Then prioritize switching to and correctly integrating the RL implementations from the `algorithm/` directory, including the MCTS parameters (Goal #2). Subsequent frontend and API work depends on this corrected backend foundation.
