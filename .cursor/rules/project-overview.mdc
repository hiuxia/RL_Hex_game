---
description: 
globs: 
alwaysApply: true
---
---
description: "High-level overview of the RL Hex Game project architecture, purpose, and core technologies."
alwaysApply: true
---

# Project Overview: RL Hex Game

## Core Purpose

This project implements the game of Hex, featuring a web-based UI and an AI opponent powered by reinforcement learning (PyTorch).

## Architecture: Client-Server

1.  **Frontend (Client):**
    * Technology: Next.js (React, TypeScript) with App Router.
    * Styling: Tailwind CSS (`@./hex-ai-frontend/tailwind.config.ts`).
    * State Management: Zustand (`@./hex-ai-frontend/src/store/gameStore.ts`).
    * Key Interaction: Communicates with the backend primarily via WebSockets.
2.  **Backend (Server):**
    * Technology: Django (Python 3).
    * Real-time Communication: ASGI with Django Channels for WebSockets (`@./backend/RL_Hex_game/Hex/Hex/asgi.py`, `@./backend/RL_Hex_game/Hex/Hexgame/consumers.py`).
    * API: Secondary REST API via DRF (`@./backend/RL_Hex_game/Hex/Hexgame/views.py`) - focus is shifting to WebSockets for game logic.
    * Persistence: SQLite database using Django ORM (`@./backend/RL_Hex_game/Hex/Hexgame/models.py`).
    * Core App: `Hexgame`.
3.  **Reinforcement Learning Agent:**
    * Technology: PyTorch.
    * Location: Integrated within the backend Python environment (canonical code intended for `@./backend/RL_Hex_game/algorithm/`).
    * Interaction: Called by the backend (`consumers.py`) to generate AI moves. See `rl-agent-interaction.mdc` for details.

## Key Interaction Pattern

Frontend <-> WebSocket Server (Django Channels) <-> Django Game Logic/Models <-> RL Agent Logic
