---
description: 
globs: 
alwaysApply: true
---
---
description: "Defines the overall API strategy (WebSocket & REST) and communication contracts for the RL Hex Game project."
# Apply always, as API interaction is fundamental.
alwaysApply: true
---

# API Guidelines (WebSocket & REST)

This project utilizes both WebSocket for real-time communication and REST APIs for other interactions. The general strategy is to **prioritize WebSockets for core, real-time game actions** (moves, state updates, undo) and use **REST for auxiliary actions** (fetching game lists, potentially initial game setup, status checks).

## 1. WebSocket API (Primary for Real-time)

-   **Purpose:** Handles real-time game state synchronization, player moves, AI moves, undo/restart actions during an active game session.
-   **Implementation:** Django Channels, handled by `HexgameConsumer` in `@./backend/RL_Hex_game/Hex/Hexgame/consumers.py`.
-   **Connection:**
    -   New Game Creation: Temporary connection to `/ws/game/new/`.
    -   Active Game: Persistent connection to `/ws/game/[gameId]/`.
-   **Message Format:** JSON (see details below).
-   **Key Frontend Hook:** `@./hex-ai-frontend/src/hooks/useGameWebSocket.ts`.
-   **Key Frontend Store Logic:** `@./hex-ai-frontend/src/store/gameStore.ts`.

### Message Structure

**Frontend -> Backend:**

```json
{
  "action": "<action_name>",
  // ...other data specific to the action
}
```


- Key action values: create_game, move, ai_move, undo, restart.
- Payload details:
    - create_game: Requires mode ("HUMAN_AI" or "AI_AI").
    - move: Requires x, y (backend XY coordinates).

**Backend -> Frontend:**
```
{
  "type": "<message_type>",
  "data": {
    // ...state or error details
  }
}
```


- Key type values: game_created, game_state, game_update, error.
- data for game_state/game_update is the serialized HexGame model (see @./backend/RL_Hex_game/Hex/Hexgame/serializers.py).
## 2. REST API (Secondary / Auxiliary)
- Purpose: Handles non-real-time operations, potentially initial resource creation, fetching lists, or status checks outside an active WebSocket session. Note: Some existing REST endpoints for game actions (move, undo, etc.) might be deprecated in favor of WebSocket handling as per refactoring goals.
- Implementation: Django REST Framework (DRF), handled by Views in @./backend/RL_Hex_game/Hex/Hexgame/views.py.
- Routing: Defined in @./backend/RL_Hex_game/Hex/Hexgame/urls.py.
- Serialization: Uses @./backend/RL_Hex_game/Hex/Hexgame/serializers.py.

### Existing REST Endpoints (Review needed based on refactoring goals):
- **POST** `/api/games/`: Create a new game (GameAPI). (Consider if create_game via WebSocket is preferred).
- **GET** `/api/games/<int:game_id>/`: Get game status (GameAPI).
- **POST** `/api/games/<int:game_id>/move/`: Submit a move (MoveAPI). (Likely superseded by WebSocket).
- **POST** `/api/games/<int:game_id>/ai_move/`: Trigger AI move (AIMoveAPI). (Likely superseded by WebSocket).
- **POST** `/api/games/<int:game_id>/undo/`: Undo move (UndoAPI). (Likely superseded by WebSocket).
- **POST** `/api/games/<int:game_id>/restart/`: Restart game (RestartAPI). (Likely superseded by WebSocket).
- **POST** `/api/ai_games/`: Create AI vs AI game (CreateAIGameAPI). (Consider if create_game via WebSocket is preferred).
- **GET** `/api/ai_games/<int:game_id>/`: Get AI vs AI game status (AIGameStatusAPI).
- **Future**: GET /api/games/ (or similar) for fetching a list of games is a planned addition.

### API Strategy Goal
- **Refine usage:** Minimize REST API use for actions that modify or depend on the real-time state of an active game. Favor WebSockets for move, ai_move, undo, restart.
- **Use REST for:** 
  - Fetching lists (e.g., game history)
  - Potentially initial setup if needed before WebSocket connection
  - User settings
  - Other non-real-time operations

## Guidance

When implementing API interactions, prefer the WebSocket approach for real
